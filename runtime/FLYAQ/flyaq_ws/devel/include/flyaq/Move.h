/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/viki/Desktop/FLYAQ/flyaq_ws/src/flyaq/msg/Move.msg
 *
 */


#ifndef FLYAQ_MESSAGE_MOVE_H
#define FLYAQ_MESSAGE_MOVE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <flyaq/Action.h>
#include <flyaq/Action.h>
#include <flyaq/Coordinate.h>

namespace flyaq
{
template <class ContainerAllocator>
struct Move_
{
  typedef Move_<ContainerAllocator> Type;

  Move_()
    : name()
    , type(0)
    , pre_actions()
    , post_actions()
    , altitude(0.0)
    , target_position()
    , strategy(0)
    , duration()
    , radius(0.0)
    , circle_altitude(0.0)
    , clockwise(false)
    , direction(0.0)  {
    }
  Move_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , type(0)
    , pre_actions(_alloc)
    , post_actions(_alloc)
    , altitude(0.0)
    , target_position(_alloc)
    , strategy(0)
    , duration()
    , radius(0.0)
    , circle_altitude(0.0)
    , clockwise(false)
    , direction(0.0)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef int8_t _type_type;
  _type_type type;

   typedef std::vector< ::flyaq::Action_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::flyaq::Action_<ContainerAllocator> >::other >  _pre_actions_type;
  _pre_actions_type pre_actions;

   typedef std::vector< ::flyaq::Action_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::flyaq::Action_<ContainerAllocator> >::other >  _post_actions_type;
  _post_actions_type post_actions;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef  ::flyaq::Coordinate_<ContainerAllocator>  _target_position_type;
  _target_position_type target_position;

   typedef int8_t _strategy_type;
  _strategy_type strategy;

   typedef ros::Duration _duration_type;
  _duration_type duration;

   typedef float _radius_type;
  _radius_type radius;

   typedef float _circle_altitude_type;
  _circle_altitude_type circle_altitude;

   typedef uint8_t _clockwise_type;
  _clockwise_type clockwise;

   typedef float _direction_type;
  _direction_type direction;


    enum { START = 0 };
     enum { STOP = 1 };
     enum { TAKE_OFF = 2 };
     enum { LAND = 3 };
     enum { GO_TO = 4 };
     enum { HOVER = 5 };
     enum { CIRCLE = 6 };
     enum { HEAD_TO = 7 };
     enum { DIRECT = 0 };
     enum { HORIZONTAL_FIRST = 1 };
     enum { VERTICAL_FIRST = 2 };
 

  typedef boost::shared_ptr< ::flyaq::Move_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flyaq::Move_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct Move_

typedef ::flyaq::Move_<std::allocator<void> > Move;

typedef boost::shared_ptr< ::flyaq::Move > MovePtr;
typedef boost::shared_ptr< ::flyaq::Move const> MoveConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flyaq::Move_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flyaq::Move_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace flyaq

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/groovy/share/std_msgs/msg'], 'flyaq': ['/home/viki/Desktop/FLYAQ/flyaq_ws/src/flyaq/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::flyaq::Move_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flyaq::Move_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flyaq::Move_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flyaq::Move_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flyaq::Move_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flyaq::Move_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flyaq::Move_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f90cd9c8abd82ddcb255e24ed8f258a2";
  }

  static const char* value(const ::flyaq::Move_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf90cd9c8abd82ddcULL;
  static const uint64_t static_value2 = 0xb255e24ed8f258a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::flyaq::Move_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flyaq/Move";
  }

  static const char* value(const ::flyaq::Move_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flyaq::Move_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n\
int8 START = 0\n\
int8 STOP = 1\n\
int8 TAKE_OFF = 2\n\
int8 LAND = 3\n\
int8 GO_TO = 4\n\
int8 HOVER = 5\n\
int8 CIRCLE = 6\n\
int8 HEAD_TO = 7\n\
int8 type # enumerate above\n\
Action[] pre_actions\n\
Action[] post_actions\n\
float32 altitude # filled only in case of TakeOff move\n\
Coordinate target_position # filled only in case of GoTo or Circle moves\n\
int8 DIRECT = 0\n\
int8 HORIZONTAL_FIRST = 1\n\
int8 VERTICAL_FIRST = 2\n\
int8 strategy # enumerated above, filled only in case of GoTo move\n\
duration duration # filled only in case of Hover or Circle moves\n\
float32 radius # filled only in case of Circle move\n\
float32 circle_altitude # filled only in case of Circle move\n\
bool clockwise # filled only in case of Circle move\n\
float32 direction # filled only in case of HeadTo move \n\n\
================================================================================\n\
MSG: flyaq/Action\n\
string name\n\
int8 DEVICE = 0\n\
int8 FEEDBACK = 1\n\n\
int8 CHECK = 2\n\n\
int8 UNICAST_NOTIFY = 3\n\n\
int8 MULTICAST_NOTIFY = 4\n\n\
int8 BROADCAST_NOTIFY = 5\n\n\
int8 type # enumerate above\n\n\
string action_name # filled only in case of DeviceAction and Feedback\n\n\
Parameter[] parameters # filled only in case of DeviceAction and Feedback\n\n\
string slot_name # filled only in case of Notify (any kind) or CheckNotification\n\n\
string[] receivers_name # filled only in case of MulticastNotify or UnicastNotify\n\n\n\
================================================================================\n\
MSG: flyaq/Parameter\n\
string key\n\
string value\n\n\
================================================================================\n\
MSG: flyaq/Coordinate\n\
float32 latitude\n\
float32 longitude\n\
float32 altitude\n\
float32 heading\n\n\n\n\
";
  }

  static const char* value(const ::flyaq::Move_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flyaq::Move_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.type);
      stream.next(m.pre_actions);
      stream.next(m.post_actions);
      stream.next(m.altitude);
      stream.next(m.target_position);
      stream.next(m.strategy);
      stream.next(m.duration);
      stream.next(m.radius);
      stream.next(m.circle_altitude);
      stream.next(m.clockwise);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Move_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flyaq::Move_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flyaq::Move_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "pre_actions[]" << std::endl;
    for (size_t i = 0; i < v.pre_actions.size(); ++i)
    {
      s << indent << "  pre_actions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::flyaq::Action_<ContainerAllocator> >::stream(s, indent + "    ", v.pre_actions[i]);
    }
    s << indent << "post_actions[]" << std::endl;
    for (size_t i = 0; i < v.post_actions.size(); ++i)
    {
      s << indent << "  post_actions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::flyaq::Action_<ContainerAllocator> >::stream(s, indent + "    ", v.post_actions[i]);
    }
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "target_position: ";
    s << std::endl;
    Printer< ::flyaq::Coordinate_<ContainerAllocator> >::stream(s, indent + "  ", v.target_position);
    s << indent << "strategy: ";
    Printer<int8_t>::stream(s, indent + "  ", v.strategy);
    s << indent << "duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.duration);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "circle_altitude: ";
    Printer<float>::stream(s, indent + "  ", v.circle_altitude);
    s << indent << "clockwise: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clockwise);
    s << indent << "direction: ";
    Printer<float>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLYAQ_MESSAGE_MOVE_H
