"""autogenerated by genpy from flyaq/Move.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import flyaq.msg

class Move(genpy.Message):
  _md5sum = "f90cd9c8abd82ddcb255e24ed8f258a2"
  _type = "flyaq/Move"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string name
int8 START = 0
int8 STOP = 1
int8 TAKE_OFF = 2
int8 LAND = 3
int8 GO_TO = 4
int8 HOVER = 5
int8 CIRCLE = 6
int8 HEAD_TO = 7
int8 type # enumerate above
Action[] pre_actions
Action[] post_actions
float32 altitude # filled only in case of TakeOff move
Coordinate target_position # filled only in case of GoTo or Circle moves
int8 DIRECT = 0
int8 HORIZONTAL_FIRST = 1
int8 VERTICAL_FIRST = 2
int8 strategy # enumerated above, filled only in case of GoTo move
duration duration # filled only in case of Hover or Circle moves
float32 radius # filled only in case of Circle move
float32 circle_altitude # filled only in case of Circle move
bool clockwise # filled only in case of Circle move
float32 direction # filled only in case of HeadTo move 

================================================================================
MSG: flyaq/Action
string name
int8 DEVICE = 0
int8 FEEDBACK = 1

int8 CHECK = 2

int8 UNICAST_NOTIFY = 3

int8 MULTICAST_NOTIFY = 4

int8 BROADCAST_NOTIFY = 5

int8 type # enumerate above

string action_name # filled only in case of DeviceAction and Feedback

Parameter[] parameters # filled only in case of DeviceAction and Feedback

string slot_name # filled only in case of Notify (any kind) or CheckNotification

string[] receivers_name # filled only in case of MulticastNotify or UnicastNotify


================================================================================
MSG: flyaq/Parameter
string key
string value

================================================================================
MSG: flyaq/Coordinate
float32 latitude
float32 longitude
float32 altitude
float32 heading



"""
  # Pseudo-constants
  START = 0
  STOP = 1
  TAKE_OFF = 2
  LAND = 3
  GO_TO = 4
  HOVER = 5
  CIRCLE = 6
  HEAD_TO = 7
  DIRECT = 0
  HORIZONTAL_FIRST = 1
  VERTICAL_FIRST = 2

  __slots__ = ['name','type','pre_actions','post_actions','altitude','target_position','strategy','duration','radius','circle_altitude','clockwise','direction']
  _slot_types = ['string','int8','flyaq/Action[]','flyaq/Action[]','float32','flyaq/Coordinate','int8','duration','float32','float32','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,type,pre_actions,post_actions,altitude,target_position,strategy,duration,radius,circle_altitude,clockwise,direction

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Move, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.type is None:
        self.type = 0
      if self.pre_actions is None:
        self.pre_actions = []
      if self.post_actions is None:
        self.post_actions = []
      if self.altitude is None:
        self.altitude = 0.
      if self.target_position is None:
        self.target_position = flyaq.msg.Coordinate()
      if self.strategy is None:
        self.strategy = 0
      if self.duration is None:
        self.duration = genpy.Duration()
      if self.radius is None:
        self.radius = 0.
      if self.circle_altitude is None:
        self.circle_altitude = 0.
      if self.clockwise is None:
        self.clockwise = False
      if self.direction is None:
        self.direction = 0.
    else:
      self.name = ''
      self.type = 0
      self.pre_actions = []
      self.post_actions = []
      self.altitude = 0.
      self.target_position = flyaq.msg.Coordinate()
      self.strategy = 0
      self.duration = genpy.Duration()
      self.radius = 0.
      self.circle_altitude = 0.
      self.clockwise = False
      self.direction = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_b.pack(self.type))
      length = len(self.pre_actions)
      buff.write(_struct_I.pack(length))
      for val1 in self.pre_actions:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_b.pack(val1.type))
        _x = val1.action_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.slot_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.receivers_name)
        buff.write(_struct_I.pack(length))
        for val2 in val1.receivers_name:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      length = len(self.post_actions)
      buff.write(_struct_I.pack(length))
      for val1 in self.post_actions:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_b.pack(val1.type))
        _x = val1.action_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.slot_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.receivers_name)
        buff.write(_struct_I.pack(length))
        for val2 in val1.receivers_name:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      _x = self
      buff.write(_struct_5fb2i2fBf.pack(_x.altitude, _x.target_position.latitude, _x.target_position.longitude, _x.target_position.altitude, _x.target_position.heading, _x.strategy, _x.duration.secs, _x.duration.nsecs, _x.radius, _x.circle_altitude, _x.clockwise, _x.direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pre_actions is None:
        self.pre_actions = None
      if self.post_actions is None:
        self.post_actions = None
      if self.target_position is None:
        self.target_position = flyaq.msg.Coordinate()
      if self.duration is None:
        self.duration = genpy.Duration()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 1
      (self.type,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pre_actions = []
      for i in range(0, length):
        val1 = flyaq.msg.Action()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 1
        (val1.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.action_name = str[start:end].decode('utf-8')
        else:
          val1.action_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.parameters = []
        for i in range(0, length):
          val2 = flyaq.msg.Parameter()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8')
          else:
            val2.value = str[start:end]
          val1.parameters.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.slot_name = str[start:end].decode('utf-8')
        else:
          val1.slot_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.receivers_name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.receivers_name.append(val2)
        self.pre_actions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.post_actions = []
      for i in range(0, length):
        val1 = flyaq.msg.Action()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 1
        (val1.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.action_name = str[start:end].decode('utf-8')
        else:
          val1.action_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.parameters = []
        for i in range(0, length):
          val2 = flyaq.msg.Parameter()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8')
          else:
            val2.value = str[start:end]
          val1.parameters.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.slot_name = str[start:end].decode('utf-8')
        else:
          val1.slot_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.receivers_name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.receivers_name.append(val2)
        self.post_actions.append(val1)
      _x = self
      start = end
      end += 42
      (_x.altitude, _x.target_position.latitude, _x.target_position.longitude, _x.target_position.altitude, _x.target_position.heading, _x.strategy, _x.duration.secs, _x.duration.nsecs, _x.radius, _x.circle_altitude, _x.clockwise, _x.direction,) = _struct_5fb2i2fBf.unpack(str[start:end])
      self.clockwise = bool(self.clockwise)
      self.duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_b.pack(self.type))
      length = len(self.pre_actions)
      buff.write(_struct_I.pack(length))
      for val1 in self.pre_actions:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_b.pack(val1.type))
        _x = val1.action_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.slot_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.receivers_name)
        buff.write(_struct_I.pack(length))
        for val2 in val1.receivers_name:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      length = len(self.post_actions)
      buff.write(_struct_I.pack(length))
      for val1 in self.post_actions:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_b.pack(val1.type))
        _x = val1.action_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.slot_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.receivers_name)
        buff.write(_struct_I.pack(length))
        for val2 in val1.receivers_name:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      _x = self
      buff.write(_struct_5fb2i2fBf.pack(_x.altitude, _x.target_position.latitude, _x.target_position.longitude, _x.target_position.altitude, _x.target_position.heading, _x.strategy, _x.duration.secs, _x.duration.nsecs, _x.radius, _x.circle_altitude, _x.clockwise, _x.direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pre_actions is None:
        self.pre_actions = None
      if self.post_actions is None:
        self.post_actions = None
      if self.target_position is None:
        self.target_position = flyaq.msg.Coordinate()
      if self.duration is None:
        self.duration = genpy.Duration()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 1
      (self.type,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pre_actions = []
      for i in range(0, length):
        val1 = flyaq.msg.Action()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 1
        (val1.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.action_name = str[start:end].decode('utf-8')
        else:
          val1.action_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.parameters = []
        for i in range(0, length):
          val2 = flyaq.msg.Parameter()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8')
          else:
            val2.value = str[start:end]
          val1.parameters.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.slot_name = str[start:end].decode('utf-8')
        else:
          val1.slot_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.receivers_name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.receivers_name.append(val2)
        self.pre_actions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.post_actions = []
      for i in range(0, length):
        val1 = flyaq.msg.Action()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 1
        (val1.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.action_name = str[start:end].decode('utf-8')
        else:
          val1.action_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.parameters = []
        for i in range(0, length):
          val2 = flyaq.msg.Parameter()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8')
          else:
            val2.value = str[start:end]
          val1.parameters.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.slot_name = str[start:end].decode('utf-8')
        else:
          val1.slot_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.receivers_name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.receivers_name.append(val2)
        self.post_actions.append(val1)
      _x = self
      start = end
      end += 42
      (_x.altitude, _x.target_position.latitude, _x.target_position.longitude, _x.target_position.altitude, _x.target_position.heading, _x.strategy, _x.duration.secs, _x.duration.nsecs, _x.radius, _x.circle_altitude, _x.clockwise, _x.direction,) = _struct_5fb2i2fBf.unpack(str[start:end])
      self.clockwise = bool(self.clockwise)
      self.duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
_struct_5fb2i2fBf = struct.Struct("<5fb2i2fBf")
