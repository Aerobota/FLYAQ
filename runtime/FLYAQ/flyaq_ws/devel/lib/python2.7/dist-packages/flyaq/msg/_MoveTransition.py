"""autogenerated by genpy from flyaq/MoveTransition.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveTransition(genpy.Message):
  _md5sum = "d6b577bdbfc0416bf6dfa5e8a4570219"
  _type = "flyaq/MoveTransition"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool is_choice # true if the move transition is a Choice move transition
string wait_for_slot_name
string from_move_name
string to_move_name
bool fluid
string condition_identifier # filled only in case of Choice move transition
string false_branch_move_name # filled only in case of Choice move transition

"""
  __slots__ = ['is_choice','wait_for_slot_name','from_move_name','to_move_name','fluid','condition_identifier','false_branch_move_name']
  _slot_types = ['bool','string','string','string','bool','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_choice,wait_for_slot_name,from_move_name,to_move_name,fluid,condition_identifier,false_branch_move_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveTransition, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.is_choice is None:
        self.is_choice = False
      if self.wait_for_slot_name is None:
        self.wait_for_slot_name = ''
      if self.from_move_name is None:
        self.from_move_name = ''
      if self.to_move_name is None:
        self.to_move_name = ''
      if self.fluid is None:
        self.fluid = False
      if self.condition_identifier is None:
        self.condition_identifier = ''
      if self.false_branch_move_name is None:
        self.false_branch_move_name = ''
    else:
      self.is_choice = False
      self.wait_for_slot_name = ''
      self.from_move_name = ''
      self.to_move_name = ''
      self.fluid = False
      self.condition_identifier = ''
      self.false_branch_move_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.is_choice))
      _x = self.wait_for_slot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.from_move_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.to_move_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.fluid))
      _x = self.condition_identifier
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.false_branch_move_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.is_choice,) = _struct_B.unpack(str[start:end])
      self.is_choice = bool(self.is_choice)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.wait_for_slot_name = str[start:end].decode('utf-8')
      else:
        self.wait_for_slot_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.from_move_name = str[start:end].decode('utf-8')
      else:
        self.from_move_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.to_move_name = str[start:end].decode('utf-8')
      else:
        self.to_move_name = str[start:end]
      start = end
      end += 1
      (self.fluid,) = _struct_B.unpack(str[start:end])
      self.fluid = bool(self.fluid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.condition_identifier = str[start:end].decode('utf-8')
      else:
        self.condition_identifier = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.false_branch_move_name = str[start:end].decode('utf-8')
      else:
        self.false_branch_move_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.is_choice))
      _x = self.wait_for_slot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.from_move_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.to_move_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.fluid))
      _x = self.condition_identifier
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.false_branch_move_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.is_choice,) = _struct_B.unpack(str[start:end])
      self.is_choice = bool(self.is_choice)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.wait_for_slot_name = str[start:end].decode('utf-8')
      else:
        self.wait_for_slot_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.from_move_name = str[start:end].decode('utf-8')
      else:
        self.from_move_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.to_move_name = str[start:end].decode('utf-8')
      else:
        self.to_move_name = str[start:end]
      start = end
      end += 1
      (self.fluid,) = _struct_B.unpack(str[start:end])
      self.fluid = bool(self.fluid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.condition_identifier = str[start:end].decode('utf-8')
      else:
        self.condition_identifier = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.false_branch_move_name = str[start:end].decode('utf-8')
      else:
        self.false_branch_move_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
